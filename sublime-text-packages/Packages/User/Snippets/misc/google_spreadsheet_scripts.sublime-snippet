<snippet>
  <content><![CDATA[
// Add the ID of the spreadsheet here
var spreadsheetID = '0ApI9xmBd0kPzdGJPUUVvTGJIZmprQUowSXJKb2tYdXc';

// Add the table ID of the fusion table here
var tableIDFusion = '1HwblrqLu8SUckDPGVXH0lpTympVunuiXFMGtH6M';

// key needed for fusion tables api
var fusionTablesAPIKey = 'AIzaSyAtS1OYyuRY0inb23BK0nuGId3FiOC6Rb8';

// the name of the range used in the program
var rangeName = 'updateFusion';

// create menu buttons
function onOpen(){
    var ss = SpreadsheetApp.getActiveSpreadsheet();
    var menuEntries = [{
        name: "Process New Row of Data",
        functionName: "runSpreadsheetFunctions"
    }, {
    	name: "Update Map With New Data From Spreadsheet",
    	functionName: "updateFusion"
    }, {
        name: "Backup Spreadsheet Data",
        functionName: "syncMasterDataSheet"
    }, {
        name: "Set Range of Data For Map (Include Headers)",
        functionName: "setRangeFusion"
    }, {
    	name: "Change Email Information",
    	functionName: "fixEmail"
    }];
    ss.addMenu("Update Spreadsheet and Map", menuEntries);
};

// copy data from form sheet to live mapping sheet
function syncMasterDataSheet(){

    // source doc
    var sss = SpreadsheetApp.openById(spreadsheetID);

    // source sheet
    var ss = sss.getSheetByName('master_data_sheet');

    // Get full range of data
    var SRange = ss.getDataRange();

    // get A1 notation identifying the range
    var A1Range = SRange.getA1Notation();

    // get the data values in range
    var SData = SRange.getValues();

    // target spreadsheet
    var tss = SpreadsheetApp.openById(spreadsheetID);

    // target sheet
    var ts = tss.getSheetByName('backup_data_sheet');

    // set the target range to the values of the source data
    ts.getRange(A1Range).setValues(SData);

};

// begin
function runSpreadsheetFunctions(){
    evaluateProjectType();
    Utilities.sleep(1000);
    evaluateStatusType();
    Utilities.sleep(1000);
    concatenateAddress();
    Utilities.sleep(1000);
    geocodeAddressFromCell();
    Utilities.sleep(1000);
    splitLatLong()
    Utilities.sleep(1000);
    syncMasterDataSheet();
    Utilities.sleep(1000);
    updateFusion();
    Utilities.sleep(1000);
};
// end

// evaluate project type and set identifier
function evaluateProjectType(){
    var sss = SpreadsheetApp.openById(spreadsheetID);
    var ss = sss.getSheetByName('master_data_sheet');
    var projectTypeColumn = "B";
    var projectMarkerIdColumn = "C";
    var lastRow = ss.getLastRow();
    var projectTypeCell = projectTypeColumn + lastRow;
    var projectMarkerIdCell = projectMarkerIdColumn + lastRow;
    var projectMarkerIdFormula = "=IF(" + projectTypeCell + "=\"development\", \"buildings\", IF(" + projectTypeCell + "=\"roads\", \"tram\", IF(" + projectTypeCell + "=\"food\", \"rec_dining\", IF(" + projectTypeCell + "=\"arts\", \"museum\"))))";
    var ssCellToGetFormula = ss.getRange(projectMarkerIdCell);
    //Logger.log(ssCellToGetFormula);
    ssCellToGetFormula.setFormula(projectMarkerIdFormula);

/*
    if (projectTypeCell == 'development'){
        var markerIdCell = ss.getRange(lastRow, 3).setValue('buildings');
    } else if (projectTypeCell == 'roads'){
        var markerIdCell = ss.getRange(lastRow, 3).setValue('tram');
    } else if (projectTypeCell == 'food'){
        var markerIdCell = ss.getRange(lastRow, 3).setValue('rec_dining');
    } else {
        var markerIdCell = ss.getRange(lastRow, 3).setValue('museum');
    }
*/

};

// evaluate project type and set identifier
function evaluateStatusType(){
    var sss = SpreadsheetApp.openById(spreadsheetID);
    var ss = sss.getSheetByName('master_data_sheet');
    var statusTypeColumn = "E";
    var statusIdentifierColumn = "F";
    var lastRow = ss.getLastRow();
    var statusTypeCell = statusTypeColumn + lastRow;
    var statusIdentifierCell = statusIdentifierColumn + lastRow;
    var statusIdentifierFormula = "=IF(" + statusTypeCell + "=\"proposed\", \"1\", IF(" + statusTypeCell + "=\"approved\", \"2\", IF(" + statusTypeCell + "=\"construction\", \"3\", IF(" + statusTypeCell + "=\"open\", \"4\"))))";

    var ssCellToGetFormula = ss.getRange(statusIdentifierCell);
    //Logger.log(ssCellToGetFormula);
    ssCellToGetFormula.setFormula(statusIdentifierFormula);

/*
    if (projectStatusCell == 'proposed'){
        var markerIdCell = ss.getRange(lastRow, 6).setValue('1');
    } else if (projectStatusCell == 'approved'){
        var markerIdCell = ss.getRange(lastRow, 6).setValue('2');
    } else if (projectStatusCell == 'construction'){
        var markerIdCell = ss.getRange(lastRow, 6).setValue('3');
    } else {
        var markerIdCell = ss.getRange(lastRow, 6).setValue('4');
    }
*/

};

// combine addresses into one cell
function concatenateAddress(){
    var sss = SpreadsheetApp.openById(spreadsheetID);
    var ss = sss.getSheetByName('master_data_sheet');
    var lastRow = ss.getLastRow();
    var projectStreetCell = ss.getRange(lastRow, 10).getValue();
    var projectCityCell = ss.getRange(lastRow, 11).getValue();
    var projectStateCell = ss.getRange(lastRow, 12).getValue();
    var projectZipCodeCell = ss.getRange(lastRow, 13).getValue();
    var combinedAddressData = projectStreetCell + ', ' + projectCityCell + ', ' + projectStateCell + ' ' + projectZipCodeCell;
    var combinedAddressDataCell = ss.getRange(lastRow, 14).setValue(combinedAddressData);
};

// geocode the address field in the last row of the spreadsheet
function geocodeAddressFromCell(){
    var sss = SpreadsheetApp.openById(spreadsheetID);
    var ss = sss.getSheetByName('master_data_sheet');
    var lastRow = ss.getLastRow();
    var addressCellData = ss.getRange(lastRow, 14).getValue();
    var results = Maps.newGeocoder().geocode(addressCellData);

    if (results.status == 'OK') {
        var bestResult = results.results[0];
        var lat = bestResult.geometry.location.lat;
        var lng = bestResult.geometry.location.lng;
        var latLng = lat + ',' + lng;
        //Logger.log('Results: ' + latLng);
        var addressTargetCellData = ss.getRange(lastRow, 18).setValue(latLng);

    } else {
        Logger.log(results.status);
        return '0,0';
    }

};

// evaluate project type and set identifier
function splitLatLong(){
    var sss = SpreadsheetApp.openById(spreadsheetID);
    var ss = sss.getSheetByName('master_data_sheet');
    var latitudeColumn = "P";
    var geocodedAddressColumn = "R";
    var lastRow = ss.getLastRow();
    var latitudeCell = latitudeColumn + lastRow;
    var geocodedCell = geocodedAddressColumn + lastRow;

    var splitLatLongFormula = "=SPLIT(" + geocodedCell + ", \",\")";
    var latCellToGetFormula = ss.getRange(latitudeCell);
    //Logger.log(ssCellToGetFormula);
    latCellToGetFormula.setFormula(splitLatLongFormula);

};

// main function
function updateFusion(){

    // gets the user property 'email' out of project properties
    var email = UserProperties.getProperty('email');

    // gets the user property 'password' out of project properties
    var password = UserProperties.getProperty('password');

    // if either email or password is not saved in project properties this will store them there

    if (email === null || password === null) {

        // browser box to input email
        email = Browser.inputBox('Enter email');
        password = Browser.inputBox('Enter password');
        UserProperties.setProperty('email', email);
        UserProperties.setProperty('password', password);
    } else {
        email = UserProperties.getProperty('email');
        password = UserProperties.getProperty('password');
    }

	var authToken = getGAauthenticationToken(email, password);
	deleteData(authToken, tableIDFusion);
	var updateMsg = updateData(authToken, tableIDFusion);
	var updatedRowsCount = updateMsg.split(/\n/).length - 2;
	SpreadsheetApp.getActiveSpreadsheet().toast("Updated " + updatedRowsCount + " rows in the Fusion Table", "Fusion Tables Update", 5)
};

// Google Authentication API this is taken directly from the google fusion api website
function getGAauthenticationToken(email, password){
    password = encodeURIComponent(password);
    var response = UrlFetchApp.fetch("https://www.google.com/accounts/ClientLogin", {
        method: "post",
        payload: "accountType=GOOGLE&Email=" + email + "&Passwd=" + password + "&service=fusiontables&Source=testing"
    });

	var responseStr = response.getContentText();
	responseStr = responseStr.slice(responseStr.search("Auth=") + 5, responseStr.length);
	responseStr = responseStr.replace(/\n/g, "");
	return responseStr;
};

// query fusion API post
function queryFusionTables(authToken, query){

    // location to send the infomation to
    var prefix = "https://www.googleapis.com/fusiontables/v1/query?key=";
    var suffix = fusionTablesAPIKey + '&';
    var URL = prefix + suffix;

    // sends the the authentication and the query in url format
    var response = UrlFetchApp.fetch(URL, {
        method: "post",
        headers: {
            "Authorization": "GoogleLogin auth=" + authToken,
        },
        payload: "sql=" + query
    });

    return response.getContentText();
};

// delete old data in fusion table
function deleteData(authToken, tableID){
    var query = encodeURIComponent("DELETE FROM " + tableID);
    return queryFusionTables(authToken, query);
};

// puts all the current information in the spreadsheet into a query
function updateData(authToken, tableID){

    //find sheets with ranges that will be sent
    var ss = SpreadsheetApp.getActiveSpreadsheet();
    var range = ss.getRangeByName(rangeName);
    var data = range.getValues();

    // format data
    for (var i in data) {
        for (var j in data[i]) {
            if (isNaN(data[i][j])) {
                data[i][j] = data[i][j].replace(/'/g, "\\'");
            }
        }
    }

	var headers = data[0];
	var queryPrepend = "INSERT INTO " + tableID + " (" + "\'" + headers.join("\',\'") + "\'" + ") VALUES ('";
	var query = "";

	for (var i = 1; i < data.length; ++i) {
	   if (typeof (data[i][0]) == "string" && data[i][0] == "") {
	       continue;
	   }

   query += queryPrepend + data[i].join("','") + "'); ";

    }
	return queryFusionTables(authToken, encodeURIComponent(query));
};

// change email if needed
function fixEmail(){
    var decision = Browser.msgBox("WARNING", "Are you sure you want to change your email?", Browser.Buttons.YES_NO);
    if (decision == 'yes') {
        var email = Browser.inputBox('Enter email');
        var password = Browser.inputBox('Enter password');
		UserProperties.setProperty('email', email);
		UserProperties.setProperty('password', password);
	}
};

// set range
function setRangeFusion(){
    var decision = Browser.msgBox("WARNING", "Are you sure you want to change the Update Fusion Range?", Browser.Buttons.YES_NO);
    if (decision == 'yes') {
        var ss = SpreadsheetApp.getActiveSpreadsheet();
        var check = ss.getRangeByName(rangeName)
            if (check != null) {
                ss.removeNamedRange(rangeName);
            }
		var range = SpreadsheetApp.getActiveRange()
		ss.setNamedRange(rangeName, range);
		Browser.msgBox("WARNING", "The range \'" + rangeName + "\' used to send data to Fusion has been changed.", Browser.Buttons.OK);
	}
};
]]></content>
  <tabTrigger>{"$class"=>{"CF$UID"=>8}, "content"=>{"CF$UID"=>17}, "keyCombo"=>{"CF$UID"=>0}, "title"=>{"CF$UID"=>16}, "version"=>{"CF$UID"=>7}}</tabTrigger>
  <description>google_spreadsheet_scripts</description>
  <!-- <scope>[add here]</scope> -->
</snippet>
