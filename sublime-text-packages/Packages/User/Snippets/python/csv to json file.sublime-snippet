<snippet>
  <content><![CDATA[
import os, sys, csv, json

def convertToJson(filename):

    print "\nparsing %s" % (filename)

    # open the csv
    file = open(filename, 'rU')

    # create a new list to push keys to
    fieldnames = []

    # gather the first row as string
    dict_keys = file.readline()

    # split the string on commas
    split_keys = dict_keys.rstrip('\r\n').split(',')

    # for each key
    for key in split_keys:

        # remove whitespace & push to fieldnames list
        if ' ' in key:
            edited_key = key.replace(" ", "").lower()
            fieldnames.append(edited_key)

        # remove underscores & push to fieldnames list
        elif '_' in key:
            edited_key = key.replace("_", "").lower()
            fieldnames.append(edited_key)

        # or push to fieldnames list
        else:
            edited_key = key.lower()
            fieldnames.append(edited_key)

    # convert the fieldnames list to a tuple
    fieldnames = tuple(fieldnames)

    reader = csv.DictReader(file, fieldnames = fieldnames)

    # parse CSV into JSON
    jsonOutput = json.dumps([row for row in reader])

    print "creating json for timeline"

    # create json for use with timeline
    data_to_write = '%s' % (jsonOutput)

    # get file name by stripping csv extension and rename as json
    json_flat_file = os.path.splitext(filename)[0] + '.json'

    # open output file
    new_file = open(json_flat_file, 'w')

    # write to the output file
    new_file.write(data_to_write)

    # close the output file
    new_file.close()

    # close the output file
    file.close()

    print '%s converted to %s \n' % (filename, json_flat_file)

    return

convertToJson('data-file.csv')
]]></content>
  <tabTrigger>{"$class"=>{"CF$UID"=>14}, "content"=>{"CF$UID"=>28}, "keyCombo"=>{"CF$UID"=>0}, "title"=>{"CF$UID"=>27}, "trigger"=>{"CF$UID"=>29}, "version"=>{"CF$UID"=>13}}</tabTrigger>
  <description>csv to json file</description>
  <!-- <scope>[add here]</scope> -->
</snippet>
