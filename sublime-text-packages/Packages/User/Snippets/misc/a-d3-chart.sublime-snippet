<snippet>
    <content><![CDATA[
        /*
        var dataPoints = [{
                "val": fn.percentifyValue(feature.properties.la_area_rent_rent_high_pct),
                "coefficientVariable": feature.properties.la_area_rent_rent_high_cv,
                "moe": feature.properties.la_area_rent_rent_high_error,
                "name": "High"
            }, {
                "val": fn.percentifyValue(feature.properties.la_area_rent_rent_medium_pct),
                "coefficientVariable": feature.properties.la_area_rent_rent_medium_cv,
                "moe": feature.properties.la_area_rent_rent_medium_error,
                "name": "Medium"
            }, {
                "val": fn.percentifyValue(feature.properties.la_area_rent_rent_low_pct),
                "coefficientVariable": feature.properties.la_area_rent_rent_low_cv,
                "moe": feature.properties.la_area_rent_rent_low_error,
                "name": "Low"
            }, {
                "val": fn.percentifyValue(feature.properties.la_area_rent_rent_not_computed_pct),
                "coefficientVariable": feature.properties.la_area_rent_rent_not_computed_cv,
                "moe": feature.properties.la_area_rent_rent_not_computed_error,
                "name": "Not Computed"},
        ];

        var width = 420,
            height = 420,
            outerRadius = Math.min(width, height) / 2,
            innerRadius = outerRadius * .6,
            color = d3.scale.ordinal()
                .range(["#d94701", "#fd8d3c", "#fdbe85", "#feedde"]);
            donut = d3.layout.pie(),
            arc = d3.svg.arc().innerRadius(innerRadius).outerRadius(outerRadius);

        var vis = d3.select("#data-point-display")
            .append("svg")
            .data([dataPoints])
            .attr("width", width)
            .attr("height", height);

        var arcs = vis.selectAll("g.arc")
            .data(donut.value(function(d) {
                return d.val
            }))
            .enter().append("g")
            .attr("class", "arc")
            .attr("transform", "translate(" + outerRadius + "," + outerRadius + ")");

        arcs.append("svg:path")
            .attr("fill", function(d, i) {
                return color(i);
            })
            .attr("stroke", "#000000")
            .attr("stroke-width", 0.5)
            .attr("d", arc);

            .on("mouseenter", function(d) {
                arcs.append("text")
                    .attr("transform", arc.centroid(d))
                    .attr("dy", ".5em")
                    .style("text-anchor", "middle")
                    .style("fill", "#f07a30")
                    .attr("class", "on")
                    .text(d.data.name);
            })
            .on("mouseout", function(d) {
                console.log(d);
            });

        arcs.append("svg:text")
            .attr("transform", function(d) {
                return "translate(" + arc.centroid(d) + ")";
            })
            .attr("dy", ".35em")
            .attr("text-anchor", "middle")
            .attr("display", function(d) {
                return d.value > .15 ? null : "none";
            })
            .text(function(d, i) {
                var dataPoint = d.data.val + "%"
                var marginOfError = "(+/-" + d.data.moe + ")"
                if (d.data.coefficientVariable >= 0.10){
                    return dataPoint + " â€  " + marginOfError;
                } else {
                    return dataPoint + " " + marginOfError;
                }

            });
        */
]]></content>
    <!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
    <!-- <tabTrigger>hello</tabTrigger> -->
    <!-- Optional: Set a scope to limit where the snippet will trigger -->
    <!-- <scope>source.python</scope> -->
</snippet>
